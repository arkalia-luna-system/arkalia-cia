#!/bin/bash
# Script de validation de la coh√©rence documentation vs code

echo "üîç Validation de la coh√©rence documentation vs code"
echo "=================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteurs
ISSUES=0
WARNINGS=0

echo ""
echo "üìä 1. V√©rification des services Flutter..."

# V√©rifier les services mentionn√©s dans la doc
EXPECTED_SERVICES=("api_service.dart" "calendar_service.dart" "contacts_service.dart" "local_storage_service.dart")
for service in "${EXPECTED_SERVICES[@]}"; do
    if [ -f "arkalia_cia/lib/services/$service" ]; then
        echo -e "  ‚úÖ $service - Pr√©sent"
    else
        echo -e "  ${RED}‚ùå $service - Manquant${NC}"
        ((ISSUES++))
    fi
done

echo ""
echo "üìä 2. V√©rification des widgets Flutter..."

# V√©rifier les widgets mentionn√©s dans la doc
EXPECTED_WIDGETS=("emergency_contact_card.dart" "emergency_contact_dialog.dart" "emergency_info_card.dart")
for widget in "${EXPECTED_WIDGETS[@]}"; do
    if [ -f "arkalia_cia/lib/widgets/$widget" ]; then
        echo -e "  ‚úÖ $widget - Pr√©sent"
    else
        echo -e "  ${RED}‚ùå $widget - Manquant${NC}"
        ((ISSUES++))
    fi
done

echo ""
echo "üìä 3. V√©rification des √©crans Flutter..."

# V√©rifier les √©crans mentionn√©s dans la doc
EXPECTED_SCREENS=("home_page.dart" "documents_screen.dart" "health_screen.dart" "reminders_screen.dart" "emergency_screen.dart")
for screen in "${EXPECTED_SCREENS[@]}"; do
    if [ -f "arkalia_cia/lib/screens/$screen" ]; then
        echo -e "  ‚úÖ $screen - Pr√©sent"
    else
        echo -e "  ${RED}‚ùå $screen - Manquant${NC}"
        ((ISSUES++))
    fi
done

echo ""
echo "üìä 4. V√©rification des services Python..."

# V√©rifier les services Python mentionn√©s dans la doc
EXPECTED_PYTHON_SERVICES=("api.py" "database.py" "pdf_processor.py" "security_dashboard.py" "storage.py" "auto_documenter.py")
for service in "${EXPECTED_PYTHON_SERVICES[@]}"; do
    if [ -f "arkalia_cia_python_backend/$service" ]; then
        echo -e "  ‚úÖ $service - Pr√©sent"
    else
        echo -e "  ${RED}‚ùå $service - Manquant${NC}"
        ((ISSUES++))
    fi
done

echo ""
echo "üìä 5. V√©rification des versions..."

# V√©rifier la version Flutter dans pubspec.yaml
FLUTTER_VERSION=$(grep -o 'sdk: ">=3.0.0 <4.0.0"' arkalia_cia/pubspec.yaml)
if [ -n "$FLUTTER_VERSION" ]; then
    echo -e "  ‚úÖ Version Dart: $FLUTTER_VERSION"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è Version Dart non trouv√©e${NC}"
    ((WARNINGS++))
fi

# V√©rifier la version Python dans requirements.txt
if [ -f "requirements.txt" ]; then
    PYTHON_VERSION=$(grep -o 'python_requires.*3.10' pyproject.toml 2>/dev/null || echo "Non sp√©cifi√©")
    echo -e "  ‚úÖ Version Python: $PYTHON_VERSION"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è requirements.txt non trouv√©${NC}"
    ((WARNINGS++))
fi

echo ""
echo "üìä 6. V√©rification des tests..."

# Compter les tests Python
PYTHON_TESTS=$(find tests -name "*.py" -type f | wc -l)
echo -e "  ‚úÖ Tests Python: $PYTHON_TESTS fichiers"

# V√©rifier les tests Flutter
if [ -d "arkalia_cia/test" ]; then
    FLUTTER_TESTS=$(find arkalia_cia/test -name "*.dart" -type f | wc -l)
    echo -e "  ‚úÖ Tests Flutter: $FLUTTER_TESTS fichiers"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è Dossier de tests Flutter non trouv√©${NC}"
    ((WARNINGS++))
fi

echo ""
echo "üìä 7. V√©rification de la structure des dossiers..."

# V√©rifier la structure des dossiers
EXPECTED_DIRS=("arkalia_cia/lib/screens" "arkalia_cia/lib/services" "arkalia_cia/lib/widgets" "arkalia_cia/lib/utils" "arkalia_cia_python_backend" "tests" "docs")
for dir in "${EXPECTED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo -e "  ‚úÖ $dir - Pr√©sent"
    else
        echo -e "  ${RED}‚ùå $dir - Manquant${NC}"
        ((ISSUES++))
    fi
done

echo ""
echo "üìä 8. V√©rification des fichiers de documentation..."

# V√©rifier les fichiers de documentation
EXPECTED_DOCS=("README.md" "SECURITY.md" "docs/ARCHITECTURE.md" "docs/API.md" "docs/CONTRIBUTING.md" "docs/DEPLOYMENT.md" "docs/CHANGELOG.md")
for doc in "${EXPECTED_DOCS[@]}"; do
    if [ -f "$doc" ]; then
        echo -e "  ‚úÖ $doc - Pr√©sent"
    else
        echo -e "  ${RED}‚ùå $doc - Manquant${NC}"
        ((ISSUES++))
    fi
done

echo ""
echo "üìä 9. V√©rification des fichiers de configuration..."

# V√©rifier les fichiers de configuration
EXPECTED_CONFIGS=("arkalia_cia/pubspec.yaml" "pyproject.toml" ".pre-commit-config.yaml" "Makefile")
for config in "${EXPECTED_CONFIGS[@]}"; do
    if [ -f "$config" ]; then
        echo -e "  ‚úÖ $config - Pr√©sent"
    else
        echo -e "  ${RED}‚ùå $config - Manquant${NC}"
        ((ISSUES++))
    fi
done

echo ""
echo "=================================================="
echo "üìã R√âSUM√â DE LA VALIDATION"
echo "=================================================="

if [ $ISSUES -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aucun probl√®me critique d√©tect√©${NC}"
else
    echo -e "${RED}‚ùå $ISSUES probl√®me(s) critique(s) d√©tect√©(s)${NC}"
fi

if [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è $WARNINGS avertissement(s)${NC}"
fi

echo ""
echo "üéØ Actions recommand√©es:"
if [ $ISSUES -gt 0 ]; then
    echo "  - Corriger les fichiers manquants"
    echo "  - Mettre √† jour la documentation"
fi
if [ $WARNINGS -gt 0 ]; then
    echo "  - V√©rifier les configurations"
    echo "  - Am√©liorer la couverture de tests"
fi

echo ""
echo "üîç Validation termin√©e !"
