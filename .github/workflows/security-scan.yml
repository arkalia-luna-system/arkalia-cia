# Security Scan pour Arkalia CIA
# Scan de s√©curit√© automatis√© et complet

name: "Security Scan"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Scan quotidien √† 3h00 UTC (5h00 Paris)
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: "Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: pip

    - name: "Install Security Tools"
      run: |
        pip install --upgrade pip
        pip install bandit safety pip-audit semgrep
        pip install -r requirements.txt

    - name: "Bandit Security Scan"
      run: |
        echo "üîç Bandit Security Scan"
        bandit -r arkalia_cia_python_backend/ \
          -f json -o bandit-report.json \
          -f txt -o bandit-report.txt \
          --severity-level medium \
          --confidence-level medium || echo "WARNING: Bandit scan completed with issues"

    - name: "Safety Check"
      run: |
        echo "üîç Safety Check"
        safety check -r requirements.txt \
          --json --output safety-report.json \
          --text --output safety-report.txt || echo "WARNING: Safety check completed with issues"

    - name: "Pip Audit"
      run: |
        echo "üîç Pip Audit"
        pip-audit -r requirements.txt \
          --format json --output pip-audit.json \
          --format text --output pip-audit.txt || echo "WARNING: Pip audit completed with issues"

    - name: "Semgrep Security Scan"
      run: |
        echo "üîç Semgrep Security Scan"
        semgrep --config=auto \
          --json --output=semgrep-report.json \
          --text --output=semgrep-report.txt \
          arkalia_cia_python_backend/ || echo "WARNING: Semgrep scan completed with issues"

    - name: "Flutter Security Check"
      run: |
        echo "üîç Flutter Security Check"
        cd arkalia_cia
        flutter pub deps --json > ../flutter-deps.json || echo "WARNING: Flutter deps check failed"
        flutter analyze --no-fatal-infos > ../flutter-analyze.txt || echo "WARNING: Flutter analyze completed with issues"

    - name: "Upload Security Reports"
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          *-report.json
          *-report.txt
          flutter-deps.json
          flutter-analyze.txt
        retention-days: 90

    - name: "Security Summary"
      run: |
        echo "üõ°Ô∏è SECURITY SCAN SUMMARY"
        echo "========================="

        # Bandit summary
        if [ -f bandit-report.json ]; then
          echo "Bandit: $(jq '.results | length' bandit-report.json) issues found"
        else
          echo "Bandit: No report generated"
        fi

        # Safety summary
        if [ -f safety-report.json ]; then
          echo "Safety: $(jq '.vulnerabilities | length' safety-report.json) vulnerabilities found"
        else
          echo "Safety: No report generated"
        fi

        # Pip audit summary
        if [ -f pip-audit.json ]; then
          echo "Pip Audit: $(jq '.vulnerabilities | length' pip-audit.json) vulnerabilities found"
        else
          echo "Pip Audit: No report generated"
        fi

        # Semgrep summary
        if [ -f semgrep-report.json ]; then
          echo "Semgrep: $(jq '.results | length' semgrep-report.json) findings"
        else
          echo "Semgrep: No report generated"
        fi

        echo "========================="
        echo "Reports uploaded as artifacts"

    - name: "Comment PR with Security Results"
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let comment = '## üõ°Ô∏è Security Scan Results\n\n';

          // Bandit results
          if (fs.existsSync('bandit-report.json')) {
            const bandit = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            comment += `**Bandit**: ${bandit.results.length} security issues found\n`;
          }

          // Safety results
          if (fs.existsSync('safety-report.json')) {
            const safety = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            comment += `**Safety**: ${safety.vulnerabilities.length} vulnerabilities found\n`;
          }

          comment += '\nüìä Detailed reports available in artifacts';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
