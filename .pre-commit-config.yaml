# Configuration Pre-commit pour Arkalia-CIA
# Version FINALE - ZÉRO CONFLIT garanti

repos:
  # ==============================================
  # FORMATAGE PYTHON UNIFIÉ AVEC RUFF
  # ==============================================

  # Ruff - Tout en un (linting + formatage + imports)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.15
    hooks:
      # 1. Linting avec auto-fix
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        stages: [pre-commit]

      # 2. Formatage (remplace Black + isort)
      - id: ruff-format
        stages: [pre-commit]

  # ==============================================
  # HOOKS GÉNÉRAUX (STABLES)
  # ==============================================

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Nettoyage automatique
      - id: trailing-whitespace
        stages: [pre-commit]
      - id: end-of-file-fixer
        stages: [pre-commit]

      # Vérifications rapides
      - id: check-yaml
        stages: [pre-commit]
        # Exclure workflows GitHub qui peuvent avoir syntaxe spéciale
        exclude: ^\.github/workflows/.*\.ya?ml$

      - id: check-added-large-files
        args: [--maxkb=5000] # 5MB max
        stages: [pre-commit]

      - id: check-merge-conflict
        stages: [pre-commit]

      # Python spécifique
      - id: debug-statements
        stages: [pre-commit]
      - id: check-docstring-first
        stages: [pre-commit]

# ==============================================
# CONFIGURATION GLOBALE OPTIMISÉE
# ==============================================

default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# Exclusions pour éviter problèmes
exclude: |
  (?x)^(
    .*\.egg-info/.*|
    .*/__pycache__/.*|
    .*/\.git/.*|
    .*/build/.*|
    .*/dist/.*|
    .*/venv/.*|
    .*/\.venv/.*|
    arkalia_cia_venv/.*|
    arkalia_cia/(ios|android|windows|linux|macos|web)/.*|
    .*\.(lock|log|cache)$|
    htmlcov/.*|
    \.coverage.*
  )$

# ==============================================
# AVANTAGES DE CETTE CONFIGURATION :
# ==============================================
#
# ✅ ZÉRO CONFLIT - Ruff gère tout (linting + format + imports)
# ✅ RAPIDE - Moins de hooks, moins d'installations
# ✅ MODERNE - Ruff est l'outil de référence 2024
# ✅ STABLE - Pas de conflits Black vs isort
# ✅ SIMPLE - Configuration minimale et efficace
#
# MyPy et Bandit disponibles manuellement si besoin :
# - ruff check arkalia_cia_python_backend/ --fix
# - mypy arkalia_cia_python_backend/ --ignore-missing-imports
# - bandit -r arkalia_cia_python_backend/ -ll
# ==============================================
