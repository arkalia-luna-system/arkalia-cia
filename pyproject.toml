[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arkalia-cia"
version = "1.0.0"
description = "Arkalia-CIA - Application de gestion de documents pour Patricia"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Arkalia Luna System", email = "contact@arkalia-luna.com"}
]
maintainers = [
    {name = "Arkalia Luna System", email = "contact@arkalia-luna.com"}
]
keywords = ["document-management", "pdf", "mobile", "fastapi", "flutter"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "fastapi==0.104.1",
    "uvicorn==0.24.0",
    "pydantic==2.5.2",
    "cryptography==41.0.7",
    "python-multipart==0.0.6",
    "python-dotenv==1.0.0",
    "click==8.1.7",
    "rich==13.7.0",
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "loguru==0.7.2",
    "PyPDF2==3.0.1",
    "python-magic==0.4.27",
    "pathlib2==2.3.7",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-builtins>=2.0.0",
    "flake8-quotes>=3.4.0",
    "pep8-naming>=0.13.0",
    "mccabe>=0.7.0",
    "pyupgrade>=3.0.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "coverage>=7.0.0",
    "safety>=2.0.0",
    "pip-audit>=2.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pip-audit>=2.0.0",
]

[project.scripts]
arkalia-cia = "arkalia_cia_python_backend.api:main"

[project.urls]
Homepage = "https://github.com/arkalia-luna-system/arkalia-cia"
Documentation = "https://github.com/arkalia-luna-system/arkalia-cia#readme"
Repository = "https://github.com/arkalia-luna-system/arkalia-cia"
"Bug Tracker" = "https://github.com/arkalia-luna-system/arkalia-cia/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["arkalia_cia_python_backend*"]
exclude = ["*._*", "*.DS_Store", "._*", "**/._*", "**/*._*"]

[tool.setuptools.package-data]
arkalia_cia_python_backend = ["*.py", "*.json", "*.yaml"]

[tool.setuptools.exclude-package-data]
"*" = ["*._*", "*.DS_Store", "._*", "**/._*", "**/*._*"]

# Configuration pytest unifi√©e et moderne
[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = [".git", "archive", "backups", "logs", ".venv", "venv", "__pycache__"]
minversion = "6.0"
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cache-clear",
    "--import-mode=importlib",
    "--maxfail=10",
    "--durations=10",
    "--cov=arkalia_cia_python_backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=15",
]
markers = [
    "fast: marks tests as fast (deselect with '-m \"not fast\"')",
    "medium: marks tests as medium speed (deselect with '-m \"not medium\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmark tests",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "timeout: marks tests with timeout",
    "no_cov: marks tests that should not use coverage",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | arkalia_cia_venv
  | build
  | dist
  | archive
  | backups
  | logs
  | arkalia_cia/
)/
'''
preview = true

[tool.ruff]
target-version = "py310"
line-length = 88
exclude = [
    ".venv",
    "venv",
    "arkalia_cia_venv",
    "archive",
    "backups",
    "logs",
    "arkalia_cia/",
    "__pycache__",
    ".git",
    ".mypy_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E722",  # do not use bare except
    "F401",  # imported but unused
]

[tool.ruff.lint.isort]
known-first-party = ["arkalia_cia_python_backend"]

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
strict_equality = false
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true
exclude = [
    "tests/",
    "archive/",
    "backups/",
    "logs/",
    "arkalia_cia/",
    ".venv/",
    "venv/",
    "arkalia_cia_venv/",
    "arkalia_cia_python_backend/auto_documenter.py",
    "arkalia_cia_python_backend/storage.py",
    "arkalia_cia_python_backend/security_dashboard.py",
    "arkalia_cia_python_backend/database.py",
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["arkalia_cia_python_backend"]
known_third_party = [
    "pytest", "fastapi", "uvicorn", "pydantic", "cryptography", "click", "rich",
    "loguru", "PyPDF2", "python-magic", "pathlib2", "python-dotenv"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
skip = [".venv", "venv", "arkalia_cia_venv", "archive", "backups", "logs", "__pycache__", ".git"]
skip_glob = ["**/migrations/*"]
force_sort_within_sections = true
lines_after_imports = 2

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "archive", "backups", "logs", "arkalia_cia"]
skips = ["B101", "B108", "B306", "B601", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610"]
targets = ["arkalia_cia_python_backend/api.py", "arkalia_cia_python_backend/database.py", "arkalia_cia_python_backend/pdf_processor.py"]
recursive = false
verbose = false
output_format = "text"
output_file = "logs/bandit_report.json"

[tool.coverage.run]
source = ["arkalia_cia_python_backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/archive/*",
    "*/backups/*",
    "*/logs/*",
    "*/htmlcov/*",
    "*/arkalia_cia/*",
    "*/api.py",
    "*/auto_documenter.py",
    "*/storage.py",
    "*/security_dashboard.py",
]
branch = true
relative_files = true
data_file = ".coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
